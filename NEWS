
CHANGES IN VERSION 0.99.5
------------------------

* CoNGAfy now can reduce the size of multiple dimensions using mean or distance. 
* aaproperty internal function relies on philentropy package for distance calculation based on pearson correlation

CHANGES IN VERSION 0.99.4
------------------------

* Added CoNGAfy() function to reduce RNA to a single cell per clonotype based on either mean expression or euclidean distance of the PCA.
* Changed normalization for length-based distance calculation, was effectively halving the true distance, over calling neighbors when using thresholding. 
* AA property normalization now uses Euclidean distance instead of cosine. Simplifies the normalization. 
* Removed the multicore parallelization, after implementing the above (and removing the over calling issue) the code is substantially faster when using thresholding!


CHANGES IN VERSION 0.99.3
------------------------

* Added clonalCommunity() function to allow for assignment and subsequent regression of feature space of groupings.
* Changed neighbor.manager. Reverted the nearest neighbor proximation to the original version which only randomizes clones. Threshold detection changed to use expand.grid() instead of looping through all barcodes. 
* Added support for aaReduction() and distReduction to the clonalCommunity() function
* Added multicore parallelization to aaProperty() and distanceMatrix() function to speed up reduction. On an object of 3200 cells, sped the calculation up 8x.

CHANGES IN VERSION 0.99.2
------------------------

* Added seed parameter to improve reproducibility 
* Added clone.proportion parameter to select for the relative number of duplicates to allow into nearest neighbor evaluation
* New internal function neighbor.manager - nearest neighbor approximation is now based on clone proportion (for clones), the remaining neighbors are randomized across unique clones in the vicinity of the clonotype/cell in question. 
* Modified Mean approach for aa.property now references the correct columns in generating output frame and the cosine distance function
* Changed internal function parameters to prevent the recursive issue.
* added aaReduction() and distReduction() functions to get intermediate values for a layer. 


CHANGES IN VERSION 0.99.1
------------------------

* Changed metric functions as it related to memory. Firstly, no more as.matrix() calls, this prevents upper ceiling on memory usage. 
* Now distance is computed and from each row, a normalized comparison is made using the method for near call, which is then converted and stored as an edge list. This eliminates 3 matrices - pairwise distance matrix, normalized distance matrix and the adjacency matrix. Based on some benchmarking, this is a reduction in memory of around 3 (matrices) x 50. 
*Edge list is now used to form multiplex graph object, with the list of edges across layers used to make supraAdjacency matrix.
* AAProperties distance calculated using cosine using the philanthropy package - this returns a distance object instead of a Pearson correlation-based pairwise matrix, saves time and memory
* Gene Usage Metrics return edge list directly, no intermediate adjacency matrix