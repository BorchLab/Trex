reduction = "wnn.umap",
features ="Glycolysis") +
scale_color_viridis(option = "B")  +
theme_void() +
guides(color = "none") +
theme(plot.title = element_blank())
ggsave(filename = paste0("Glyc.png"), height = 3, width = 3, dpi = 600)
FeaturePlot(list,
reduction = "wnn.umap",
features ="G2M") +
scale_color_viridis(option = "B")  +
theme_void() +
guides(color = "none") +
theme(plot.title = element_blank())
FeaturePlot(list,
reduction = "wnn.umap",
features ="G2M") +
scale_color_viridis(option = "B")  +
theme_void() +
guides(color = "none") +
theme(plot.title = element_blank())
ggsave(filename = paste0("G2M.png"), height = 3, width = 3, dpi = 600)
FeaturePlot(list,
reduction = "wnn.umap",
features ="G1S") +
scale_color_viridis(option = "B")  +
theme_void() +
guides(color = "none") +
theme(plot.title = element_blank())
ggsave(filename = paste0("G1S.png"), height = 3, width = 3, dpi = 600)
for (i in seq_along(markers)) {
FeaturePlot(list,
reduction = "wnn.umap",
features =markers[i]) +
scale_color_viridis(option = "B") +
theme_void() +
guides(color = "none") +
theme(plot.title = element_blank())
ggsave(filename = paste0(markers[i], ".png"), height = 3, width = 3, dpi = 600)
}
markers <- colnames(ES)
for (i in seq_along(markers)) {
FeaturePlot(list,
reduction = "wnn.umap",
features =markers[i]) +
scale_color_viridis(option = "B") +
theme_void() +
guides(color = "none") +
theme(plot.title = element_blank())
ggsave(filename = paste0(markers[i], ".png"), height = 3, width = 3, dpi = 600)
}
rm(ES)
df <- data.frame(list@reductions$Trex.umap@cell.embeddings, list[[]])
rm(list)
meta <- df %>%
group_by(CTaa, trex.clusters) %>%
count()
duplicated(meta$CTaa)
which(duplicated(meta$CTaa))
table(meta$CTaa)
x <- table(meta$CTaa)
x <- x[x > 1]
x
'%!in%' <- Negate("%in%")
meta <- meta[meta$CTaa %!in% x, ]
x <- table(meta$CTaa)
x <- x[x > 1]
meta <- meta[meta$CTaa %!in% names(x), ]
View(meta)
conga <- readeRDS("Integrated.Conga.rds")
conga <- readRDS("Integrated.Conga.rds")
conga <- readRDS("Integrated.Conga.rds")
View(meta)
meta <- df %>%
group_by(CTaa, Patient, trex.clusters) %>%
count()
x <- table(meta$CTaa)
x <- x[x > 1]
'%!in%' <- Negate("%in%")
meta <- meta[meta$CTaa %!in% names(x), ]
rownames.meta <- meta$CTaa
rownames.meta <- meta$CTaa
meta <- meta[,-1]
rownames(meta) <- rownames.meta
conga <- AddMetaData(conga, meta)
head(conga[[]])
DimPlot(conga, reduction = "rna.umap", group.by = "CTaa") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
DimPlot(conga, reduction = "rna.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
DimPlot(conga, reduction = "Trex.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
table(df$Patient, df$ARDS)
conga$ARDS <- ifelse(conga$Patient == "S8", "moderate", "severe")
DimPlot(conga, reduction = "Trex.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
facet_grid(.~ARDS) +
theme(plot.title = element_blank())
DimPlot(conga, reduction = "Trex.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
facet_grid(.~conga$ARDS) +
theme(plot.title = element_blank())
DimPlot(conga, reduction = "Trex.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
levels <- str_sort(unique(congat$trex.clusters), numeric = TRUE)
levels <- str_sort(unique(conga$trex.clusters), numeric = TRUE)
library(stringr)
conga$ARDS <- ifelse(conga$Patient == "S8", "moderate", "severe")
levels <- str_sort(unique(conga$trex.clusters), numeric = TRUE)
conga$trex.clusters <- factor(conga$trex.clusters, levels = levels)
DimPlot(conga, reduction = "rna.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
DimPlot(conga, reduction = "Trex.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
x <- data.frame(table(conga$trex.clusters))
View(x)
conga <- subset(conga, trex.clusters != "trex.12")
DimPlot(conga, reduction = "Trex.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
DimPlot(conga, reduction = "rna.umap", group.by = "trex.clusters") +
guides(color = "none") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank())
conga <- readRDS("Integrated.Conga.rds")
library(Seurat)
list <- FindMultiModalNeighbors(
list,
k.nn = 40,
reduction.list = list("pca", "apca", "Trex.KF"),
dims.list = list(1:30, 1:20, 1:30), modality.weight.name = "RNA.weight"
)
conga <- FindMultiModalNeighbors(
conga,
k.nn = 40,
reduction.list = list("pca", "apca", "Trex.KF"),
dims.list = list(1:30, 1:20, 1:30), modality.weight.name = "RNA.weight"
)
conga <- RunUMAP(conga, nn.name = "weighted.nn",
reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
levels <- str_sort(unique(conga$trex.clusters), numeric = TRUE)
library(stringr)
levels <- str_sort(unique(conga$trex.clusters), numeric = TRUE)
meta <- df %>%
group_by(CTaa, Patient, trex.clusters) %>%
count()
library(dplyr)
meta <- df %>%
group_by(CTaa, Patient, trex.clusters) %>%
count()
x <- table(meta$CTaa)
x <- x[x > 1]
'%!in%' <- Negate("%in%")
meta <- meta[meta$CTaa %!in% names(x), ]
rownames.meta <- meta$CTaa
meta <- meta[,-1]
rownames(meta) <- rownames.meta
conga <- AddMetaData(conga, meta)
levels <- str_sort(unique(conga$trex.clusters), numeric = TRUE)
list$trex.clusters <- factor(conga$trex.clusters, levels = levels)
conga$trex.clusters <- factor(conga$trex.clusters, levels = levels)
DimPlot(conga, reduction = "wnn.umap", group.by = "trex.clusters") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
library(ggplot2)
DimPlot(conga, reduction = "wnn.umap", group.by = "trex.clusters") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
conga <- subset(conga, trex.clusters != 12)
DimPlot(conga, reduction = "wnn.umap", group.by = "trex.clusters") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
View(conga)
conga <- subset(conga, trex.clusters != "trex.12")
DimPlot(conga, reduction = "wnn.umap", group.by = "trex.clusters") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
conga <- FindMultiModalNeighbors(
conga,
k.nn = 40,
reduction.list = list("pca", "apca", "Trex.KF"),
dims.list = list(1:30, 1:20, 1:30), modality.weight.name = "RNA.weight"
)
conga <- RunUMAP(conga, nn.name = "weighted.nn",
reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
DimPlot(conga, reduction = "wnn.umap", group.by = "trex.clusters") +
scale_color_manual(values = viridis::viridis_pal(option = "H")(length(unique(conga$trex.clusters)))) +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
conga <- FindClusters(conga, graph.name = "wsnn", algorithm = 3, resolution = 0.6, verbose = FALSE)
DimPlot(conga, reduction = "wnn.umap") +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
conga <- FindClusters(conga, graph.name = "wsnn", algorithm = 3, resolution = 0.4, verbose = FALSE)
DimPlot(conga, reduction = "wnn.umap") +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
DimPlot(conga, reduction = "wnn.umap", label = TRUE) +
theme_void() +
theme(plot.title = element_blank()) +
NoLegend()
DimPlot(conga, reduction = "wnn.umap", label = TRUE) +
theme_void() +
theme(plot.title = element_blank()) +
scale_colour_tableau(palette = "Tableau 20") +
NoLegend()
library(ggthemes)
DimPlot(conga, reduction = "wnn.umap", label = TRUE) +
theme_void() +
theme(plot.title = element_blank()) +
scale_colour_tableau(palette = "Tableau 20") +
NoLegend()
ggsave(filename = paste0("WNN.conga.clone.umap.png"), height = 5, width = 5, dpi = 600)
conga <- FindClusters(conga, graph.name = "wnn", algorithm = 3, resolution = 0.4, verbose = FALSE)
conga <- FindClusters(conga, graph.name = "wknn", algorithm = 3, resolution = 0.4, verbose = FALSE)
DimPlot(conga, reduction = "wnn.umap", label = TRUE) +
theme_void() +
theme(plot.title = element_blank()) +
scale_colour_tableau(palette = "Tableau 20") +
NoLegend()
conga <- FindClusters(conga, graph.name = "wknn", algorithm = 3, resolution = 0.6, verbose = FALSE)
DimPlot(conga, reduction = "wnn.umap", label = TRUE) +
theme_void() +
theme(plot.title = element_blank()) +
scale_colour_tableau(palette = "Tableau 20") +
NoLegend()
ggsave(filename = paste0("WNN.conga.clone.umap.png"), height = 5, width = 5, dpi = 600)
adt.tmp <- data.frame(t(as.matrix(congat@assays$ADT@counts)), conga@active.ident)
adt.tmp <- data.frame(t(as.matrix(conga@assays$ADT@counts)), conga@active.ident)
colnames(adt.tmp)[38] <- "cluster"
table <-  adt.tmp %>%
group_by(cluster) %>%
summarise(across(1:37, mean))
colnames(table)
table <- table[,c(1:2,4:6, 8,12:17,20,22:24, 26:28)]
colnames(table) <- stringr::str_split(colnames(table), "[.]", simplify = TRUE)[,1]
normalize <- function(x)
{
(x- min(x)) /(max(x)-min(x))
}
for (i in 2:20) {
table[,i] <- normalize(table[,i] )
}
View(table)
for (i in 2:19) {
table[,i] <- normalize(table[,i] )
}
names <- table$cluster
table <- table[,-1]
rownames(table) <- names
pdf(paste0("wnn.heatmap.pdf"), height = 3, width = 3)
pheatmap::pheatmap(t(table), show_colnames = TRUE, color = viridis_pal(option = "B")(50))
library(viridis)
pdf(paste0("wnn.heatmap.pdf"), height = 3, width = 3)
pheatmap::pheatmap(t(table), show_colnames = TRUE, color = viridis_pal(option = "B")(50))
dev.off()
plot_density(conga,
reduction = "wnn.umap",
features ="CTLA4-TotalSeqC") +
scale_color_viridis(option = "B") +
guides(color = "none") +
theme_void() +
theme(plot.title = element_blank())
library(Nebulosa)
plot_density(conga,
reduction = "wnn.umap",
features ="CTLA4-TotalSeqC") +
scale_color_viridis(option = "B") +
guides(color = "none") +
theme_void() +
theme(plot.title = element_blank())
genes <- c("CD45RO-TotalSeqC", "CD45RA-TotalSeqC", "CD8-TotalSeqC", "CD4-TotalSeqC", "CD25-TotalSeqC", "CTLA4-TotalSeqC", "LAG3-TotalSeqC", "PDL1-TotalSeqC")
genes <- c("CD45RO-TotalSeqC", "CD45RA-TotalSeqC", "CD8-TotalSeqC", "CD4-TotalSeqC", "CD25-TotalSeqC", "CTLA4-TotalSeqC", "LAG3-TotalSeqC", "PDL1-TotalSeqC")
for (i in seq_along(genes)) {
plot_density(conga,
reduction = "wnn.umap",
features ="CTLA4-TotalSeqC") +
scale_color_viridis(option = "B") +
guides(color = "none") +
theme_void() +
theme(plot.title = element_blank())
ggsave(filename = paste0(genes[i], ".wnn..png"), height = 3, width = 3, dpi = 600)
}
for (i in seq_along(genes)) {
plot_density(conga,
reduction = "wnn.umap",
features =genes[i]) +
scale_color_viridis(option = "B") +
guides(color = "none") +
theme_void() +
theme(plot.title = element_blank())
ggsave(filename = paste0(genes[i], ".wnn..png"), height = 3, width = 3, dpi = 600)
}
list <- readRDS("./data/ProcessedData/filtered_seuratObjects.rds")
list[[]]
unique(list$orig.ident)
sub.bm <- subset(list, type == "Control" & tissue == "BM")
palette <- colorRampPalette(brewer.pal(8, "Set1"))(length(unique(list$seurat_clusters)))
library(RColorBrewer)
palette <- colorRampPalette(brewer.pal(8, "Set1"))(length(unique(list$seurat_clusters)))
DimPlot(sub.bm, pt.size = 0.01, label = TRUE) + NoLegend() +
scale_color_manual(values = palette)
genes <- c("Bach2","Notch2")
DimPlot(sub.bm, pt.size = 0.01, label = TRUE) + NoLegend() +
scale_color_manual(values = palette)
ggsave("UMAP_controlBM.png", height = 3, width =3.5, dpi = 600)
genes <- c("Bach2","Notch2")
i <- 1
FeaturePlot(list, features = genes[i]) +
facet_grid(list$tissue~list$type) +
scale_color_viridis(option = "B")
FeaturePlot(sub.bm, features = genes[i]) +
scale_color_viridis(option = "B")
for (i in seq_along(genes)) {
FeaturePlot(sub.bm, features = genes[i]) +
scale_color_viridis(option = "B")
ggsave(paste0("./Control.BM.", genes[i], ".pdf"), height = 6, width = 7)
}
merged.data <- readRDS("./organized.data/merged_rawCounts.rds")
samples <- read.delim("./organized.data/samples_inventory2.txt")
samples <- samples[1:25,1:4]
samples$sample <- paste0("sample.", samples$sample)
merged.data  <- merged.data[,colnames(merged.data ) %in% c("external_gene_name", samples$sample)]
TPM <- merged.data
TPM[,2:26] <- log(scater::calculateTPM(TPM[,2:26])+1)
TPM[,2:26] <- limma::removeBatchEffect(TPM[,2:26], batch = samples$batch)
x <- samples[samples$condition %in% c("CD5pos.LT1", "CD5pos.IgGK1"),]
TPM <- TPM[TPM$external_gene_name %in% genes, c(1,which(colnames(TPM) %in% x$sample))]
genes <- unique(c("CSF2", "CCL4L2", "TCF20", "CLEC2B", "IL6", "BCL2", "CSF2", "ZNF830", "RPE", "TFEC",
"LRRTM2", "SRPRB", "FGL2", "CCL4L2", "NDUFAF1", "TMBIM1", "ZBTB40", "DLL1", "KCTD6",
"CEBPB", "NELFCD", "GRWD1", "CD5"))
TPM <- merged.data
TPM[,2:26] <- log(scater::calculateTPM(TPM[,2:26])+1)
TPM[,2:26] <- limma::removeBatchEffect(TPM[,2:26], batch = samples$batch)
x <- samples[samples$condition %in% c("CD5pos.LT1", "CD5pos.IgGK1"),]
TPM <- TPM[TPM$external_gene_name %in% genes, c(1,which(colnames(TPM) %in% x$sample))]
names <- TPM$external_gene_name
TPM <- TPM[,-1]
rownames(TPM) <- names
names <- samples$sample
samples <- samples[,-1]
rownames(samples) <- names
samples <- samples[rownames(samples) %in% colnames(TPM),]
names <- rownames(samples)
samples <- samples[,-2]
samples <- as.data.frame(samples[,-2])
rownames(samples) <- names
colnames(samples) <- "condition"
TPM <- TPM[,c(1,3,5,7,9,2,4,6,8,10)]
pal <- brewer.pal(11,"RdYlBu")
pheatmap::pheatmap(TPM, annotation_col = samples, cluster_cols = FALSE, scale = "row", col = rev(pal))
pheatmap::pheatmap(TPM, annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
TPM <- merged.data
View(samples)
samples <- read.delim("./organized.data/samples_inventory2.txt")
samples <- samples[1:25,1:4]
samples$sample <- paste0("sample.", samples$sample)
samples <- samples[rownames(samples) %in% colnames(TPM),]
samples <- read.delim("./organized.data/samples_inventory2.txt")
samples <- samples[1:25,1:4]
samples$sample <- paste0("sample.", samples$sample
View(samples)
View(samples)
colnames(TPM
)
names <- samples$sample
samples <- samples[,-1]
rownames(samples) <- names
rownames(samples)
rownames(samples) <- paste0("sample.", names)
rownames(samples)
samples <- samples[rownames(samples) %in% colnames(TPM),]
names <- rownames(samples)
samples <- samples[,-2]
samples <- as.data.frame(samples[,-2])
View(samples)
samples <- read.delim("./organized.data/samples_inventory2.txt")
samples <- read.delim("./organized.data/samples_inventory2.txt")
samples <- samples[1:25,1:4]
samples$sample <- paste0("sample.", samples$sample)
names <- samples$sample
samples <- samples[,-1]
rownames(samples) <- paste0("sample.", names)
samples <- samples[rownames(samples) %in% colnames(TPM),]
samples <- read.delim("./organized.data/samples_inventory2.txt")
samples <- samples[1:25,1:4]
samples$sample <- paste0("sample.", samples$sample)
names <- samples$sample
names <- samples$sample
samples <- samples[,-1]
rownames(samples) <- paste0(names)
rownames(samples) %in% colnames(TPM)
samples <- samples[rownames(samples) %in% colnames(TPM),]
names <- rownames(samples)
View(samples)
TPM[,2:26] <- limma::removeBatchEffect(TPM[,2:26], batch = samples$donor)
x <- samples[samples$condition %in% c("CD5pos.LT1", "CD5pos.IgGK1"),]
TPM <- TPM[TPM$external_gene_name %in% genes, c(1,which(colnames(TPM) %in% x$sample))]
names <- TPM$external_gene_name
TPM <- TPM[,-1]
TPM <- merged.data
TPM[,2:26] <- log(scater::calculateTPM(TPM[,2:26])+1)
TPM[,2:26] <- limma::removeBatchEffect(TPM[,2:26], batch = samples$donor)
x <- samples[samples$condition %in% c("CD5pos.LT1", "CD5pos.IgGK1"),]
TPM <- TPM[TPM$external_gene_name %in% genes, c(1,which(colnames(TPM) %in% x$sample))]
names <- TPM$external_gene_name
TPM <- merged.data
TPM[,2:26] <- log(scater::calculateTPM(TPM[,2:26])+1)
TPM[,2:26] <- limma::removeBatchEffect(TPM[,2:26], batch = samples$donor)
x <- samples[samples$condition %in% c("CD5pos.LT1", "CD5pos.IgGK1"),]
View(x)
TPM$external_gene_name %in% genes
c(1,which(colnames(TPM) %in% x$sample))
colnames(TPM) %in% x$sample
View(x)
TPM <- TPM[TPM$external_gene_name %in% genes, c(1,which(colnames(TPM) %in% rowname(x)))]
x <- samples[samples$condition %in% c("CD5pos.LT1", "CD5pos.IgGK1"),]
TPM <- TPM[TPM$external_gene_name %in% genes, c(1,which(colnames(TPM) %in% rownames(x)))]
names <- TPM$external_gene_name
TPM <- TPM[,-1]
rownames(TPM) <- names
samples <- samples[rownames(samples) %in% colnames(TPM),]
names <- rownames(samples)
samples <- samples[,-2]
samples <- as.data.frame(samples[,-2])
rownames(samples) <- names
colnames(samples) <- "condition"
TPM <- TPM[,c(1,3,5,7,9,2,4,6,8,10)]
pheatmap::pheatmap(TPM, annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
pdf("requested.heatmap_unscaled.pdf")
pheatmap::pheatmap(TPM, annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
dev.off()
pheatmap::pheatmap(TPM, annotation_col = samples, scale = "row", cluster_cols = FALSE, col = rev(pal))
pdf("requested.heatmap_scaled.pdf")
pheatmap::pheatmap(TPM, annotation_col = samples, scale = "row", cluster_cols = FALSE, col = rev(pal))
dev.off()
TPM2 <- TPM
normalize <- function(x)
{
(x- min(x)) /(max(x)-min(x))
}
View(TPM2)
for (i in 1:21) {
TPM2[i,] <- normalize(TPM2[i,] )
}
pheatmap::pheatmap(TPM2, annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
pdf("requested.heatmap_scaled01.pdf")
pheatmap::pheatmap(TPM2, annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
dev.off()
TPM2 <- TPM
TPM2 <- scale(TPM)
View(TPM2)
pheatmap::pheatmap(TPM2, annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
TPM2 <- scale(t(TPM))
pheatmap::pheatmap(t(TPM2), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
TPM2 <- scale(t(TPM), center = FALSE)
pheatmap::pheatmap(t(TPM2), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
TPM2 <- scale(t(TPM), scale = FALSE)
pheatmap::pheatmap(t(TPM2), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
pdf("requested.heatmap_meancentralized.pdf")
pheatmap::pheatmap(t(TPM2), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
dev.off()
TPM2 <- TPM
TPM2 <- scale(t(TPM), center = FALSE)
TPM2 <- scale(t(TPM), center = FALSE)
pheatmap::pheatmap(t(TPM2), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
TPM2 <- scale(t(TPM), scale = FALSE)
pheatmap::pheatmap(log2(t(TPM2)), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
pheatmap::pheatmap(t(TPM2), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
pheatmap::pheatmap(log(t(TPM2)), annotation_col = samples, cluster_cols = FALSE, col = rev(pal))
View(TPM2)
log(t(TPM2))
TPM2
TPM2[[1]]
TPM2[1]
scale(t(TPM), scale = FALSE)
