sleuth_table <- unique(sleuth_table)
sleuth_table  <- sleuth_table[rowSums(is.na(sleuth_table)) != ncol(sleuth_table)-1, ]
write.table(sleuth_table, file=paste("Eynav_", paste(conditions[a]), "v", paste(conditions[b]), "_WT.txt", sep=""), sep="\t",append=F, row.names = F)
}
View(samples)
n <- seq_len(2)
id <- expand.grid(n, n)
id <- id[id$Var1 != id$Var2,]
subset <- samples[c(14,15,18,19,22,23),]
conditions <- unique(subset$condition)
conditions <- conditions[rev(order(conditions))]
for (y in 1:nrow(id)) {
a <- id[y,1]
b <- id[y,2]
if (a > b) {
tmp <- a
a <- b
b <- tmp
}
samples2 <- subset(samples, condition == paste(conditions[a]) | condition == paste(conditions[b]))
files <- file.path("./Alignments", samples2$sample)
s2c <- dplyr::mutate(samples2, path = files)
so <- sleuth_prep(s2c, target_mapping = t2g, aggregation_column = 'ext_gene', transformation_function = function(x) log2(x + 0.1), gene_mode=T)
plot_pca(so, color_by = 'condition', units = "scaled_reads_per_base") + theme_classic()
ggsave(paste("Eynav_CD4_", paste(conditions[a]), "v", paste(conditions[b]), "_PCA.pdf", sep=""), height = 3, width = 3.5)
so <- sleuth_fit(so, ~ specimen + condition, 'full')
so <- sleuth_fit(so, ~specimen, 'condition')
so <- sleuth_lrt(so, "condition", 'full')
sleuth_table <- sleuth_results(so, 'condition:full', 'lrt', show_all = FALSE)
sleuth_table <- sleuth_table[,2:12]
sleuth_table <- unique(sleuth_table)
sleuth_table  <- sleuth_table[rowSums(is.na(sleuth_table)) != ncol(sleuth_table)-1, ]
write.table(sleuth_table, file=paste("Eynav_CD4_", paste(conditions[a]), "v", paste(conditions[b]), "_LRT.txt", sep=""), sep="\t",append=F, row.names = F)
so <- sleuth_wt(so, paste0("condition", conditions[a]), 'full')
sleuth_table <- sleuth_results(so, paste("condition", paste(conditions[a]), sep=""), test_type="wt")
sleuth_table <- sleuth_table[,2:12]
sleuth_table <- unique(sleuth_table)
sleuth_table  <- sleuth_table[rowSums(is.na(sleuth_table)) != ncol(sleuth_table)-1, ]
write.table(sleuth_table, file=paste("Eynav_CD4_", paste(conditions[a]), "v", paste(conditions[b]), "_WT.txt", sep=""), sep="\t",append=F, row.names = F)
}
n <- seq_len(2)
id <- expand.grid(n, n)
id <- id[id$Var1 != id$Var2,]
subset <- samples[c(16,17,20,21,24,25),]
conditions <- unique(subset$condition)
conditions <- conditions[rev(order(conditions))]
for (y in 1:nrow(id)) {
a <- id[y,1]
b <- id[y,2]
if (a > b) {
tmp <- a
a <- b
b <- tmp
}
samples2 <- subset(samples, condition == paste(conditions[a]) | condition == paste(conditions[b]))
files <- file.path("./Alignments", samples2$sample)
s2c <- dplyr::mutate(samples2, path = files)
so <- sleuth_prep(s2c, target_mapping = t2g, aggregation_column = 'ext_gene', transformation_function = function(x) log2(x + 0.1), gene_mode=T)
plot_pca(so, color_by = 'condition', units = "scaled_reads_per_base") + theme_classic()
ggsave(paste("Eynav_CD8_", paste(conditions[a]), "v", paste(conditions[b]), "_PCA.pdf", sep=""), height = 3, width = 3.5)
so <- sleuth_fit(so, ~ specimen + condition, 'full')
so <- sleuth_fit(so, ~specimen, 'condition')
so <- sleuth_lrt(so, "condition", 'full')
sleuth_table <- sleuth_results(so, 'condition:full', 'lrt', show_all = FALSE)
sleuth_table <- sleuth_table[,2:12]
sleuth_table <- unique(sleuth_table)
sleuth_table  <- sleuth_table[rowSums(is.na(sleuth_table)) != ncol(sleuth_table)-1, ]
write.table(sleuth_table, file=paste("Eynav_CD8_", paste(conditions[a]), "v", paste(conditions[b]), "_LRT.txt", sep=""), sep="\t",append=F, row.names = F)
so <- sleuth_wt(so, paste0("condition", conditions[a]), 'full')
sleuth_table <- sleuth_results(so, paste("condition", paste(conditions[a]), sep=""), test_type="wt")
sleuth_table <- sleuth_table[,2:12]
sleuth_table <- unique(sleuth_table)
sleuth_table  <- sleuth_table[rowSums(is.na(sleuth_table)) != ncol(sleuth_table)-1, ]
write.table(sleuth_table, file=paste("Eynav_CD8_", paste(conditions[a]), "v", paste(conditions[b]), "_WT.txt", sep=""), sep="\t",append=F, row.names = F)
}
file_list <- list.files("./DGE/")
file_list <- file_list[grepl(".txt", file_list)]
files <- file.path(paste0("./DGE/", file_list))
marker_list <- list()
for (i in 1:length(files)) {
marker_list[[i]] <- read.delim(files[i])
}
names(marker_list) <- stringr::str_remove_all(file_list, ".txt")
library(dplyr)
library(ggrepel)
dir.create("./DGE/volcano")
for (i in seq_along(marker_list)) {
tmp <- marker_list[[i]]
filter_up <- subset(tmp, qval <= 0.05 & b > abs(0))
filter_down <- subset(tmp, qval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
geom_point(data = subset(tmp, target_id %in% filter_up$target_id), size=0.5, color = colorblind_vector(1)) +
geom_point(data = subset(tmp, target_id %in% filter_down$target_id),size=0.5, color = rev(colorblind_vector(2))[1]) +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)  +
geom_text_repel(data=subset(tmp, target_id %in% c(top10$target_id, bottom10$target_id)), aes(label=target_id), segment.size = 0.25, size=2.5, max.overlaps = 25)
ggsave(path = "./DGE/volcano/", file = paste0("Eynav_DC_volcanoPlot_", names(marker_list[i]), ".pdf"), height = 4, width=4)
}
colorblind_vector <- colorRampPalette(c("#FF4B20", "#FFB433", "#C6FDEC", "#7AC5FF", "#0348A6"))
for (i in seq_along(marker_list)) {
tmp <- marker_list[[i]]
filter_up <- subset(tmp, qval <= 0.05 & b > abs(0))
filter_down <- subset(tmp, qval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
geom_point(data = subset(tmp, target_id %in% filter_up$target_id), size=0.5, color = colorblind_vector(1)) +
geom_point(data = subset(tmp, target_id %in% filter_down$target_id),size=0.5, color = rev(colorblind_vector(2))[1]) +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)  +
geom_text_repel(data=subset(tmp, target_id %in% c(top10$target_id, bottom10$target_id)), aes(label=target_id), segment.size = 0.25, size=2.5, max.overlaps = 25)
ggsave(path = "./DGE/volcano/", file = paste0("Eynav_DC_volcanoPlot_", names(marker_list[i]), ".pdf"), height = 4, width=4)
}
tmp <- marker_list[[i]]
filter_up <- subset(tmp, qval <= 0.05 & b > abs(0))
filter_down <- subset(tmp, qval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
filter_up <- subset(tmp, pval <= 0.05 & b > abs(0))
filter_down <- subset(tmp, pval <= 0.05 & b < 0)
filter_up <- subset(tmp, pval <= 0.05 & b > abs(0))
filter_down <- subset(tmp, pval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
geom_point(data = subset(tmp, target_id %in% filter_up$target_id), size=0.5, color = colorblind_vector(1)) +
geom_point(data = subset(tmp, target_id %in% filter_down$target_id),size=0.5, color = rev(colorblind_vector(2))[1]) +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)  +
geom_text_repel(data=subset(tmp, target_id %in% c(top10$target_id, bottom10$target_id)), aes(label=target_id), segment.size = 0.25, size=2.5, max.overlaps = 25)
filter_up <- subset(tmp, pval <= 0.05 & b > 0)
filter_down <- subset(tmp, pval <= 0.05 & b < 0)
plot <- ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)  +
ggsave(path = "./DGE/volcano/", file = paste0("Eynav_DC_volcanoPlot_", names(marker_list[i]), ".pdf"), height = 4, width=4)
plot <- ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
file_list <- list.files("./DGE/")
file_list <- file_list[grepl(".txt", file_list)]
files <- file.path(paste0("./DGE/", file_list))
marker_list <- list()
for (i in 1:length(files)) {
marker_list[[i]] <- read.delim(files[i])
}
names(marker_list) <- stringr::str_remove_all(file_list, ".txt")
colorblind_vector <- colorRampPalette(c("#FF4B20", "#FFB433", "#C6FDEC", "#7AC5FF", "#0348A6"))
library(dplyr)
library(ggrepel)
dir.create("./DGE/volcano")
for (i in seq_along(marker_list)) {
tmp <- marker_list[[i]]
filter_up <- subset(tmp, pval <= 0.05 & b > 0)
filter_down <- subset(tmp, pval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
plot <- ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
if(nrow(filter_up) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_up$target_id), size=0.5, color = colorblind_vector(1))
}
if(nrow(filter_down) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_down$target_id),size=0.5, color = rev(colorblind_vector(2))[1])
}
plot <- plot + geom_text_repel(data=subset(tmp, target_id %in% c(top10$target_id, bottom10$target_id)), aes(label=target_id), segment.size = 0.25, size=2.5, max.overlaps = 25)
ggsave(plot, path = "./DGE/volcano/", file = paste0("Eynav_DC_volcanoPlot_", names(marker_list[i]), ".pdf"), height = 4, width=4)
}
for (i in seq_along(marker_list)) {
tmp <- marker_list[[i]]
filter_up <- subset(tmp, qval <= 0.05 & b > 0)
filter_down <- subset(tmp, qval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
plot <- ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
if(nrow(filter_up) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_up$target_id), size=0.5, color = colorblind_vector(1))
}
if(nrow(filter_down) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_down$target_id),size=0.5, color = rev(colorblind_vector(2))[1])
}
plot <- plot + geom_text_repel(data=subset(tmp, target_id %in% c(top10$target_id, bottom10$target_id)), aes(label=target_id), segment.size = 0.25, size=2.5, max.overlaps = 25)
ggsave(plot, path = "./DGE/volcano/", file = paste0("Eynav_DC_volcanoPlot_", names(marker_list[i]), ".pdf"), height = 4, width=4)
}
for (i in seq_along(marker_list)) {
tmp <- marker_list[[i]]
filter_up <- subset(tmp, pval <= 0.05 & b > 0)
filter_down <- subset(tmp, pval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
plot <- ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
if(nrow(filter_up) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_up$target_id), size=0.5, color = colorblind_vector(1))
}
if(nrow(filter_down) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_down$target_id),size=0.5, color = rev(colorblind_vector(2))[1])
}
plot <- plot + geom_text_repel(data=subset(tmp, target_id %in% c(top10$target_id, bottom10$target_id)), aes(label=target_id), segment.size = 0.25, size=2.5, max.overlaps = 25)
ggsave(plot, path = "./DGE/volcano/", file = paste0("Eynav_DC_volcanoPlot_", names(marker_list[i]), ".pdf"), height = 4, width=4)
}
ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
i <- ``
i <- 1
tmp <- marker_list[[i]]
filter_up <- subset(tmp, pval <= 0.05 & b > 0)
filter_down <- subset(tmp, pval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
plot <- ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
plot
View(tmp)
file_list <- file_list[grepl("LRT.txt", file_list)]
file_list <- file_list[grepl("WT.txt", file_list)]
file_list <- list.files("./DGE/")
file_list <- file_list[grepl("WT.txt", file_list)]
files <- file.path(paste0("./DGE/", file_list))
marker_list <- list()
for (i in 1:length(files)) {
marker_list[[i]] <- read.delim(files[i])
}
names(marker_list) <- stringr::str_remove_all(file_list, ".txt")
colorblind_vector <- colorRampPalette(c("#FF4B20", "#FFB433", "#C6FDEC", "#7AC5FF", "#0348A6"))
library(dplyr)
library(ggrepel)
dir.create("./DGE/volcano")
for (i in seq_along(marker_list)) {
tmp <- marker_list[[i]]
filter_up <- subset(tmp, pval <= 0.05 & b > 0)
filter_down <- subset(tmp, pval <= 0.05 & b < 0)
top10 <- filter_up %>% top_n(n =15, wt = b + 4*(-log10(qval)))
bottom10 <- filter_down %>% top_n(n =15, wt = -b + 4*(-log10(qval)))
plot <- ggplot(tmp, aes(x=b, y=-log10(qval))) +
geom_point(size=0.5, color="#999999") +
theme_classic() +
scale_y_sqrt() +
geom_hline(yintercept = 1.3, lty = 2) +
geom_vline(xintercept = 0, lty = 2)
if(nrow(filter_up) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_up$target_id), size=0.5, color = colorblind_vector(1))
}
if(nrow(filter_down) > 0) {
plot <- plot + geom_point(data = subset(tmp, target_id %in% filter_down$target_id),size=0.5, color = rev(colorblind_vector(2))[1])
}
plot <- plot + geom_text_repel(data=subset(tmp, target_id %in% c(top10$target_id, bottom10$target_id)), aes(label=target_id), segment.size = 0.25, size=2.5, max.overlaps = 25)
ggsave(plot, path = "./DGE/volcano/", file = paste0("Eynav_DC_volcanoPlot_", names(marker_list[i]), ".pdf"), height = 4, width=4)
}
SeuratObj <- readRDS(url("https://ncborcherding.github.io/vignettes/Trex_FullExample.rds"))
SeuratObj <- runTrex(SeuratObj,
edit.method = "lv",
AA.method = "auto",
AA.properties = "KF",
nearest.method = "nn",
near.neighbor = 30,
reduction.name = "Trex.KF",
clone.proportion = 0.5)
library(Trex)
SeuratObj <- runTrex(SeuratObj,
edit.method = "lv",
AA.method = "auto",
AA.properties = "KF",
nearest.method = "nn",
near.neighbor = 30,
reduction.name = "Trex.KF",
clone.proportion = 0.5)
library(patchwork)
#Generating UMAP from Trex Neighbors
SeuratObj <- RunUMAP(SeuratObj,
umap.method = "umap-learn",
reduction = "Trex.KF",
dims = 1:30,
reduction.name = 'Trex.umap',
reduction.key = 'trexUMAP_')
library(Seurat)
#Generating UMAP from Trex Neighbors
SeuratObj <- RunUMAP(SeuratObj,
umap.method = "umap-learn",
reduction = "Trex.KF",
dims = 1:30,
reduction.name = 'Trex.umap',
reduction.key = 'trexUMAP_')
#Trex UMAP
plot1 <- DimPlot(SeuratObj, reduction = "Trex.umap") + NoLegend()
plot2 <- DimPlot(SeuratObj, group.by = "CTaa", reduction = "Trex.umap") +
scale_color_viridis(option="B", discrete = TRUE) +
NoLegend()
library(viridis)
plot2 <- DimPlot(SeuratObj, group.by = "CTaa", reduction = "Trex.umap") +
scale_color_viridis(option="B", discrete = TRUE) +
NoLegend()
plot1 + plot2
SeuratObj <- FindMultiModalNeighbors(
SeuratObj, reduction.list = list("pca", "apca", "Trex.KF"),
dims.list = list(1:30, 1:20, 1:30), modality.weight.name = "RNA.weight"
)
SeuratObj <- RunUMAP(SeuratObj, nn.name = "weighted.nn",
reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
SeuratObj <- FindClusters(SeuratObj, graph.name = "wsnn", resolution = 0.6,
algorithm = 3, verbose = FALSE)
#WNN UMAP
plot3 <- DimPlot(SeuratObj, reduction = "wnn.umap")
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
NoLegend()
plot3 + plot4
#WNN UMAP
plot3 <- DimPlot(SeuratObj, reduction = "wnn.umap", label = TRUE) + NoLegend()
#WNN UMAP
plot3 <- DimPlot(SeuratObj, reduction = "wnn.umap", label = TRUE) + NoLegend()
#WNN UMAP
plot3 <- DimPlot(SeuratObj, reduction = "wnn.umap", label = TRUE) + NoLegend()
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
NoLegend()
plot3 + plot4
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
NoLegend() +
theme_void()
library(ggplot2)
#WNN UMAP
plot3 <- DimPlot(SeuratObj, reduction = "wnn.umap", label = TRUE) + NoLegend() + theme_void()
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
NoLegend() +
theme_void()
plot3 + plot4
#WNN UMAP
plot3 <- DimPlot(SeuratObj, reduction = "wnn.umap", label = TRUE) + theme_void() + NoLegend()
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
theme_void()
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
theme_void() +
NoLegend()
plot3 + plot4
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
theme_void() +
theme(plot.title = element_blank())
plot3 + plot4
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
theme(plot.title = element_blank())
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
theme(plot.title = element_blank()) +
theme_void() +
NoLegend()
plot3 + plot4 + plot_layout(ncol = 1)
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
theme_void() +
NoLegend()
plot4
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
theme(plot.title = element_blank(),
plot.subtitle = element_blank()) +
theme_void() +
NoLegend()
plot4
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
labs(title = "none")
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
labs(title = "none") +
theme_void() +
NoLegend()
plot4
plot4 <- DimPlot(SeuratObj, reduction = "wnn.umap", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
labs(title = NULL) +
theme_void() +
NoLegend()
plot4
plot3 + plot4 + plot_layout(ncol = 1)
plot3 + plot4 + plot_layout(ncol = 1)
ggsave("WNN.UMAP.png", height = 6, width = 3, dpi = 600, bg = "transparent")
ggsave("WNN.UMAP.png", height = 6, width = 3.5, dpi = 600, bg = "transparent")
library(harmony)
library(bluster)
#Cluster clones
SeuratObj <- clonalCommunity(SeuratObj,
reduction.name = "Trex.KF",
cluster.parameter=NNGraphParam(k=20))
#Run Harmony and new UMAP for RNA
DefaultAssay(SeuratObj) <- "RNA"
SeuratObj<- RunHarmony(SeuratObj, "trex.clusters", verbose = FALSE)
SeuratObj <- RunUMAP(SeuratObj,
reduction = "harmony",
dims = 1:20,
reduction.key = "RFS_UMAP_",
reduction.name = "regressClone")
SeuratObj <- FindClusters(SeuratObj, graph.name = "harmony", resolution = 0.6,
algorithm = 3, verbose = FALSE)
SeuratObj <- FindClusters(SeuratObj, reduction = "harmony", resolution = 0.6,
algorithm = 3, verbose = FALSE)
SeuratObj <- SeuratObj %>%
FindNeighbors(reduction = "harmony", dims = 1:20, graph.name = "RFS") %>%
FindClusters(SeuratObj, reduction = "RFS", resolution = 0.6,
algorithm = 3, verbose = FALSE) %>%
identity()
SeuratObj <- SeuratObj %>%
FindNeighbors(reduction = "harmony", dims = 1:20, graph.name = c("RFS_nn","RFS_snn")) %>%
FindClusters(SeuratObj, reduction = "RFS", resolution = 0.6,
algorithm = 3, verbose = FALSE) %>%
identity()
SeuratObj <- SeuratObj %>%
FindNeighbors(reduction = "harmony", dims = 1:20, graph.name = c("RFS_nn","RFS_snn")) %>%
FindClusters(SeuratObj, rgraph = "RFS_snn", resolution = 0.6,
algorithm = 3, verbose = FALSE) %>%
identity()
SeuratObj <-   FindNeighbors(SeuratObj, reduction = "harmony", dims = 1:20)
SeuratObj <-   FindNeighbors(SeuratObj, reduction = "harmony", dims = 1:20, graph.name = c("RFS_nn", "RFS_snn"))
SeuratObj <- FindClusters(SeuratObj, graph = "RFS_snn", resolution = 0.6,
algorithm = 3, verbose = FALSE)
DimPlot(SeuratObj, reduction = "regressClone") +
NoLegend() +
scale_color_viridis(option="B", discrete = TRUE)
DimPlot(SeuratObj, reduction = "rna.umap", group.by = "CTaa") +
NoLegend() +
scale_color_viridis(option="B", discrete = TRUE)
DimPlot(SeuratObj, reduction = "rna.umap", group.by = "CTaa") +
NoLegend() +
scale_color_viridis(option="B", discrete = TRUE)
SeuratObj <- RunUMAP(SeuratObj, reduction = 'pca', dims = 1:30, assay = 'RNA',
reduction.name = 'rna.umap', reduction.key = 'rnaUMAP_')
DimPlot(SeuratObj, reduction = "rna.umap", group.by = "CTaa") +
NoLegend() +
scale_color_viridis(option="B", discrete = TRUE)
DimPlot(SeuratObj, reduction = "rna.umap", group.by = "CTaa") +
NoLegend() +
scale_color_viridis(option="B", discrete = TRUE, group.by = "CTaa")
DimPlot(SeuratObj, reduction = "regressClone", group.by = "CTaa") +
NoLegend() +
scale_color_viridis(option="B", discrete = TRUE)
DimPlot(SeuratObj, reduction = "rna.umap", label = TRUE) +
NoLegend()
DimPlot(SeuratObj, reduction = "regressClone", label = TRUE) +
NoLegend()
plotX <- DimPlot(SeuratObj, reduction = "regressClone", label = TRUE) +
NoLegend()
plotY <- DimPlot(SeuratObj, reduction = "regressClone", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
labs(title = NULL) +
theme_void() +
NoLegend()
plotX + plotY
plotX <- DimPlot(SeuratObj, reduction = "regressClone", label = TRUE) +
NoLegend() +
theme_void()
plotX + plotY
plotX + plotY + plot_layout(ncol = 1)
plotX <- DimPlot(SeuratObj, reduction = "regressClone", label = TRUE) +
theme_void() +
NoLegend()
plotY <- DimPlot(SeuratObj, reduction = "regressClone", group.by = "CTaa") +
scale_color_viridis(option="B", discrete = TRUE) +
labs(title = NULL) +
theme_void() +
NoLegend()
plotX + plotY + plot_layout(ncol = 1)
ggsave("RFS.UMAP.png", height = 6, width = 3.5, dpi = 600, bg = "transparent")
setwd("~/Documents/Github/Trex")
devtools::check()
devtools::check()
devtools::check()
options(buildtools.check = function(action) TRUE )
devtools::check()
