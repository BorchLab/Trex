AA.method,
c.trim,
n.trim,
nearest.method,
threshold,
near.neighbor,
add.INKT,
add.MAIT,
n.dim,
add.clusters,
species)
TCR <- getTCR(sc, chains)
if (add.INKT) {
tmpscore <- scoreINKT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "IKNT.score")
}
if (add.MAIT) {
tmpscore <- scoreMAIT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "MAIT.score")
}
sc <- adding.DR(sc, reduction, reduction.name)
if(add.neighbors) {
if (inherits(reduction, "list")) {
reduction <- reduction[[1]]
}
if (inherits(sc, "Seurat")) {
neighbors <- FindNeighbors(reduction,
annoy.metric = "cosine",
k.param = near.neighbor)
names(neighbors) <- paste0(reduction.name, ".",
AA.properties, "_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(sc[[graph.names[i]]] <- neighbors[[i]])
}
}
}
}
#' @param add.MAIT Add a additional layer for Mucosal-associated invariant T cells based on genes
#' @param n.dim The number of Trex dimensions to return, similar to PCA dimensions
#' @param add.clusters Return community-based clusters for multiplex network
#' can be either Louvain or Leiden methods or use "FALSE" to not perform clustering
#' @param species Indicate "human" or "mouse" for gene-based metrics
#'
#' @export
#' @return Seurat or SingleCellExperiment object with Trex dimensions placed
#' into the dimensional reduction slot.
#'
runTrex <- function(sc,
chains = "both",
edit.method = "lv",
AA.properties = "AF",
AA.method = "auto",
reduction.name = "Trex",
n.trim = 0,
c.trim = 0,
nearest.method = "threshold",
threshold = 0.85,
near.neighbor = NULL,
add.INKT = TRUE,
add.MAIT = TRUE,
n.dim = 40,
add.clusters = "louvain",
add.neighbors = TRUE,
species = "human") {
cells.chains <- rownames(sc[[]][!is.na(sc[["cloneType"]]),])
sc <- subset(sc, cells = cells.chains)
reduction <- maTrex(sc,
chains,
edit.method,
AA.properties,
AA.method,
c.trim,
n.trim,
nearest.method,
threshold,
near.neighbor,
add.INKT,
add.MAIT,
n.dim,
add.clusters,
species)
TCR <- getTCR(sc, chains)
if (add.INKT) {
tmpscore <- scoreINKT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "IKNT.score")
}
if (add.MAIT) {
tmpscore <- scoreMAIT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "MAIT.score")
}
sc <- adding.DR(sc, reduction, reduction.name)
if(add.neighbors) {
if (inherits(reduction, "list")) {
reduction <- reduction[[1]]
}
if (inherits(sc, "Seurat")) {
neighbors <- FindNeighbors(reduction,
annoy.metric = "cosine",
k.param = near.neighbor)
names(neighbors) <- paste0(reduction.name, ".",
AA.properties, "_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(sc[[graph.names[i]]] <- neighbors[[i]])
}
}
}
return(sc)
}
trex_example <- runTrex(trex_example,
edit.method = "lv",
AA.method = "auto",
AA.properties = "KF",
nearest.method = "threshold",
threshold = 0.8,
reduction.name = "Trex.KF",
add.clusters = "leiden",
add.neighbor = TRUE)
sc <- trex_example
cells.chains <- rownames(sc[[]][!is.na(sc[["cloneType"]]),])
sc <- subset(sc, cells = cells.chains)
reduction <- maTrex(sc,
chains,
edit.method,
AA.properties,
AA.method,
c.trim,
n.trim,
nearest.method,
threshold,
near.neighbor,
add.INKT,
add.MAIT,
n.dim,
add.clusters,
species)
TCR <- getTCR(sc, chains)
if (add.INKT) {
tmpscore <- scoreINKT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "IKNT.score")
}
if (add.MAIT) {
tmpscore <- scoreMAIT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "MAIT.score")
}
sc <- adding.DR(sc, reduction, reduction.name)
if(add.neighbors) {
if (inherits(reduction, "list")) {
reduction <- reduction[[1]]
}
if (inherits(sc, "Seurat")) {
neighbors <- FindNeighbors(reduction,
annoy.metric = "cosine",
k.param = near.neighbor)
names(neighbors) <- paste0(reduction.name, ".",
AA.properties, "_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(sc[[graph.names[i]]] <- neighbors[[i]])
}
}
}
add.neighbors = TRUE
if (inherits(reduction, "list")) {
reduction <- reduction[[1]]
}
if (inherits(sc, "Seurat")) {
neighbors <- FindNeighbors(reduction,
annoy.metric = "cosine",
k.param = near.neighbor)
names(neighbors) <- paste0(reduction.name, ".",
AA.properties, "_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(sc[[graph.names[i]]] <- neighbors[[i]])
}
}
#' @param add.MAIT Add a additional layer for Mucosal-associated invariant T cells based on genes
#' @param n.dim The number of Trex dimensions to return, similar to PCA dimensions
#' @param add.clusters Return community-based clusters for multiplex network
#' can be either Louvain or Leiden methods or use "FALSE" to not perform clustering
#' @param species Indicate "human" or "mouse" for gene-based metrics
#'
#' @export
#' @return Seurat or SingleCellExperiment object with Trex dimensions placed
#' into the dimensional reduction slot.
#'
runTrex <- function(sc,
chains = "both",
edit.method = "lv",
AA.properties = "AF",
AA.method = "auto",
reduction.name = "Trex",
n.trim = 0,
c.trim = 0,
nearest.method = "threshold",
threshold = 0.85,
near.neighbor = NULL,
add.INKT = TRUE,
add.MAIT = TRUE,
n.dim = 40,
add.clusters = "louvain",
add.neighbors = TRUE,
species = "human") {
cells.chains <- rownames(sc[[]][!is.na(sc[["cloneType"]]),])
sc <- subset(sc, cells = cells.chains)
reduction <- maTrex(sc,
chains,
edit.method,
AA.properties,
AA.method,
c.trim,
n.trim,
nearest.method,
threshold,
near.neighbor,
add.INKT,
add.MAIT,
n.dim,
add.clusters,
species)
TCR <- getTCR(sc, chains)
if (add.INKT) {
tmpscore <- scoreINKT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "IKNT.score")
}
if (add.MAIT) {
tmpscore <- scoreMAIT(TCR, species = species)
sc <- add.meta.data(sc, tmpscore, "MAIT.score")
}
sc <- adding.DR(sc, reduction, reduction.name)
if(add.neighbors) {
if (inherits(reduction, "list")) {
reduction <- reduction[[1]]
}
if (inherits(sc, "Seurat")) {
neighbors <- FindNeighbors(reduction,
annoy.metric = "cosine",
k.param = near.neighbor)
names(neighbors) <- paste0(reduction.name, ".",
AA.properties, "_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(sc[[graph.names[i]]] <- neighbors[[i]])
}
}
}
return(sc)
}
trex_example <- runTrex(trex_example,
edit.method = "lv",
AA.method = "auto",
AA.properties = "KF",
nearest.method = "threshold",
threshold = 0.8,
reduction.name = "Trex.KF",
add.clusters = "leiden",
add.neighbors = TRUE)
neighbors <- FindNeighbors(reduction,
annoy.metric = "cosine",
k.param = near.neighbor)
names(neighbors) <- paste0(reduction.name, ".",
AA.properties, "_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(sc[[graph.names[i]]] <- neighbors[[i]])
}
inherits(reduction, "list")
inherits(sc, "Seurat")
neighbors <- FindNeighbors(reduction,
annoy.metric = "cosine",
k.param = near.neighbor)
names(neighbors) <- paste0(reduction.name, ".",
AA.properties, "_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(sc[[graph.names[i]]] <- neighbors[[i]])
}
source("~/Documents/GitHub/Trex/R/runTrex.R")
trex_example <- runTrex(trex_example,
edit.method = "lv",
AA.method = "auto",
AA.properties = "KF",
nearest.method = "threshold",
threshold = 0.8,
reduction.name = "Trex.KF",
add.clusters = "leiden",
add.neighbors = TRUE)
nrows(reduction)
nrow(reduction)
k.param = near.neighbor
trex_example <- runTrex(trex_example,
edit.method = "lv",
AA.method = "auto",
AA.properties = "KF",
nearest.method = "threshold",
threshold = 0.8,
near.neighbor = 30,
reduction.name = "Trex.KF",
add.clusters = "leiden",
add.neighbors = TRUE)
source("~/Documents/GitHub/Trex/R/runTrex.R")
trex_example@graphs
names(trex_example@graphs)
source("~/Documents/GitHub/Trex/R/runTrex.R")
trex_example <- RunUMAP(trex_example, graph = "Trex.KF.KF_snn")
DimPlot(trex_example)
DimPlot(trex_example, group.by = "CTaa") + scale_color_manual(values =viridis::viridis_pal(option = "B")(length(unique(trex_example$ctaa)))) + NoLegend()
DimPlot(trex_example) + NoLegend()
DimPlot(trex_example) + NoLegend()
DimPlot(trex_example, group.by = "CTaa") + scale_color_manual(values =viridis::viridis_pal(option = "B")(length(unique(trex_example$CTaa)))) + NoLegend()
DimPlot(trex_example, group.by = "Trex.clusters")
DimPlot(trex_example, group.by = "Trex.KF.clusters")
DimPlot(trex_example, group.by = "Trex.KF.cluster")
DimPlot(trex_example, group.by = "Trex.KF.cluster") + NoLegend()
source("~/Documents/GitHub/Trex/R/runTrex.R")
source("~/Documents/GitHub/Trex/R/runTrex.R")
sce <- as.SingleCellExperiment(trex_example)
sce@int_colData$reducedDims@listData
trex_example <- FindClusters(trex_example)
graphs(trex_example)
Graphs(trex_example)
trex_example <- FindClusters(trex_example, graph = "RNA_snn")
DimPlot(trex_example, label = TRUE) + NoLegend()
DimPlot(trex_example, group.by = "CTaa") + scale_color_manual(values =viridis::viridis_pal(option = "B")(length(unique(trex_example$CTaa)))) + NoLegend()
DimPlot(trex_example, label = TRUE) + NoLegend()
neighbors <- FindNeighbors(trex_example@reductions$Trex.KF,
annoy.metric = "cosine",
k.param = 30,
verbose = FALSE)
View(neighbors)
names(neighbors) <- paste0("Trex.KF", names(neighbors))
source("~/Documents/GitHub/Trex/R/runTrex.R")
source("~/Documents/GitHub/Trex/R/runTrex.R")
source("~/Documents/GitHub/Trex/R/runTrex.R")
BP <- readRDS("~/Downloads/Cj-BP.rds")
avg <- AverageExpression(Common.combined, group.by = 'celltypes', return.seurat = TRUE)
avg <- AverageExpression(BP, group.by = 'celltypes', return.seurat = TRUE)
head(BP[[]])
rm(BP)
setwd("~/Documents/GitHub?Trex")
setwd("~/Documents/GitHub/Trex")
devtools::document()
devtools::check()
devtools::check()
neighbors <- FindNeighbors(trex_example@reductions$Trex.KF,
annoy.metric = "cosine",
k.param = 30,
verbose = FALSE)
#Adding the Neighbors to the Seurat Object
names(neighbors) <- paste0("Trex.KF", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(trex_example[[graph.names[i]]] <- neighbors[[i]])
}
#Adding the Neighbors to the Seurat Object
names(neighbors) <- paste0("Trex.KF_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(trex_example[[graph.names[i]]] <- neighbors[[i]])
}
#Generating UMAP from Trex Neighbors
trex_example <- RunUMAP(trex_example, graph = "Trex.KF_snn",
reduction.name = 'Trex.umap', reduction.key = 'trexUMAP_')
devtools::check()
devtools::check()
source("~/Documents/GitHub/Trex/R/runTrex.R")
devtools::check()
source("~/Documents/GitHub/Trex/R/runTrex.R")
devtools::check()
tmpscore <- scoreMAIT(TCR, species = species)
if (length(which(tmpscore$score > 0)) != 0) {
tmp.knn <- gene.to.knn(tmpscore)
network <- c(network, tmp.knn)
names(network)[length(network)] <- "MAIT"
}
tmpscore <- scoreINKT(TCR, species = species)
if (length(which(tmpscore$score > 0)) != 0) {
tmp.knn <- gene.to.knn(tmpscore)
network <- c(network, tmp.knn)
names(network)[length(network)] <- "INKT"
}
membership <- bind_rows(TCR)
comp <- list(mouse = list(v = "TRAV11", j = "TRAJ18", length = 15),
human = list(v = "TRAV10", j = c("TRAJ18", "TRBV25"), length = c(14,15,16)))
score <- data.frame("barcode" = unique(membership[,"barcode"]), score = 0)
cells <- unique(score$barcode)
for (i in seq_len(length(cells))) {
v <- membership[membership[,1] == cells[i],]$v
j <- membership[membership[,1] == cells[i],]$j
length <- nchar(membership[membership[,1] == cells[i],]$Var1)
if(comp[[species]]$v  %in% v && comp[[species]]$j %in% j && comp[[species]]$length %in% length) {
score$score[i] <- 1
} else {
next()
}
}
membership <- bind_rows(TCR)
comp <- list(mouse = list(v = "TRAV1", j = "TRAJ33", length = 12),
human = list(v = "TRAV1-2", j = c("TRAJ33", "TRAJ20", "TRAJ12"), length = 12))
score <- data.frame("barcode" = unique(membership[,"barcode"]), score = 0)
cells <- unique(score$barcode)
for (i in seq_len(length(cells))) {
v <- membership[membership[,1] == cells[i],]$v
j <- membership[membership[,1] == cells[i],]$j
length <- nchar(membership[membership[,1] == cells[i],]$Var1)
if(comp[[species]]$v  %in% v && comp[[species]]$j %in% j && comp[[species]]$length %in% length) {
score$score[i] <- 1
} else {
next()
}
}
devtools::check()
data("trex_example")
trex_example <- runTrex(trex_example,
edit.method = "lv",
AA.method = "auto",
AA.properties = "KF",
nearest.method = "nn",
near.neighbor = 30,
reduction.name = "Trex.KF")
neighbors <- FindNeighbors(trex_example@reductions$Trex.KF,
annoy.metric = "cosine",
k.param = 30,
verbose = FALSE)
library(Seurat)
neighbors <- FindNeighbors(trex_example@reductions$Trex.KF,
annoy.metric = "cosine",
k.param = 30,
verbose = FALSE)
#Adding the Neighbors to the Seurat Object
names(neighbors) <- paste0("Trex.KF_", names(neighbors))
graph.names <- names(neighbors)
for(i in seq_len(length(graph.names))) {
suppressWarnings(trex_example[[graph.names[i]]] <- neighbors[[i]])
}
#Generating UMAP from Trex Neighbors
trex_example <- RunUMAP(trex_example, graph = "Trex.KF_snn",
reduction.name = 'Trex.umap', reduction.key = 'trexUMAP_')
#Generating UMAP from Trex Neighbors
trex_example <- RunUMAP(trex_example, graph = "Trex.KF_snn",
reduction.name = 'Trex.umap', reduction.key = 'trexUMAP_')
#Trex UMAP
plot1 <- DimPlot(trex_example) + NoLegend()
plot2 <- DimPlot(trex_example, group.by = "CTaa") + scale_color_manual(values =viridis::viridis_pal(option = "B")(length(unique(trex_example$CTaa)))) + NoLegend()
library(ggplot2)
plot2 <- DimPlot(trex_example, group.by = "CTaa") + scale_color_manual(values =viridis::viridis_pal(option = "B")(length(unique(trex_example$CTaa)))) + NoLegend()
library(patchwork)
plot1 + plot2
trex_example <- FindMultiModalNeighbors(
trex_example, reduction.list = list("pca", "apca", "Trex.KF"),
dims.list = list(1:30, 1:20, 1:30), modality.weight.name = "RNA.weight"
)
trex_example <- RunUMAP(trex_example, nn.name = "weighted.nn",
reduction.name = "wnn.umap", reduction.key = "wnnUMAP_")
trex_example <- FindClusters(trex_example, graph.name = "wsnn", resolution = 0.6,
algorithm = 3, verbose = FALSE)
#WNN UMAP
plot3 <- DimPlot(trex_example, reduction = "wnn.umap")
plot4 <- DimPlot(trex_example, reduction = "wnn.umap", group.by = "CTaa") + scale_color_manual(values = viridis_pal(option = "B")(length(unique(trex_example$CTaa)))) + NoLegend()
library(viridis)
plot4 <- DimPlot(trex_example, reduction = "wnn.umap", group.by = "CTaa") + scale_color_manual(values = viridis_pal(option = "B")(length(unique(trex_example$CTaa)))) + NoLegend()
plot3 + plot4
trex_example <- RunUMAP(trex_example, reduction = 'pca', dims = 1:30, assay = 'RNA',
reduction.name = 'rna.umap', reduction.key = 'rnaUMAP_')
trex_example <- RunUMAP(trex_example, reduction = 'apca', dims = 1:20, assay = 'ADT',
reduction.name = 'adt.umap', reduction.key = 'adtUMAP_')
plot5 <- DimPlot(trex_example, reduction = "rna.umap") + NoLegend()
plot6 <- DimPlot(trex_example, reduction = "adt.umap") + NoLegend()
plot7 <- DimPlot(trex_example, reduction = "Trex.umap") + NoLegend()
plot5 + plot6 + plot7
head(trex_example@graphs$Trex.KF_nn)
devtools::check()
View(plot3)
data("trex_example")
edit.method = "lv"
AA.method = "auto"
AA.properties = "KF"
nearest.method = "nn"
near.neighbor = 30
reduction.name = "Trex.KF"
sc <- trex_example
cells.chains <- rownames(sc[[]][!is.na(sc[["cloneType"]]),])
sc <- subset(sc, cells = cells.chains)
TCR <- getTCR(sc, chains)
chains = "both"
tmpscore <- scoreINKT(TCR, species = species)
TCR <- getTCR(sc, chains)
tmpscore <- scoreINKT(TCR, species = species)
species = "human"
tmpscore <- scoreINKT(TCR, species = species)
warning()
warnings()
tmpscore <- scoreINKT(TCR, species = species)
warnings()
membership <- bind_rows(TCR)
comp <- list(mouse = list(v = "TRAV11", j = "TRAJ18", length = 15),
human = list(v = "TRAV10", j = c("TRAJ18", "TRBV25"), length = c(14,15,16)))
score <- data.frame("barcode" = unique(membership[,"barcode"]), score = 0)
cells <- unique(score$barcode)
v <- membership[membership[,1] == cells[i],]$v
j <- membership[membership[,1] == cells[i],]$j
length <- nchar(membership[membership[,1] == cells[i],]$Var1)
comp[[species]]$v  %in% v
comp[[species]]$j %in% j
comp[[species]]$j %in% j
comp[[species]]$length %in% length
any(comp[[species]]$length %in% length)
devtools::document()
devtools::check()
devtools::install()
